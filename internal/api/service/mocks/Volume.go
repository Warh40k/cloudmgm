// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Warh40k/cloud-manager/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Volume is an autogenerated mock type for the Volume type
type Volume struct {
	mock.Mock
}

// CheckOwnership provides a mock function with given fields: userId, vmId
func (_m *Volume) CheckOwnership(userId uuid.UUID, vmId uuid.UUID) error {
	ret := _m.Called(userId, vmId)

	if len(ret) == 0 {
		panic("no return value specified for CheckOwnership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(userId, vmId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVolume provides a mock function with given fields: userId, machine
func (_m *Volume) CreateVolume(userId uuid.UUID, machine domain.Volume) (uuid.UUID, error) {
	ret := _m.Called(userId, machine)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolume")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.Volume) (uuid.UUID, error)); ok {
		return rf(userId, machine)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.Volume) uuid.UUID); ok {
		r0 = rf(userId, machine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, domain.Volume) error); ok {
		r1 = rf(userId, machine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function with given fields: vmId
func (_m *Volume) DeleteVolume(vmId uuid.UUID) error {
	ret := _m.Called(vmId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(vmId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVolume provides a mock function with given fields: vmId
func (_m *Volume) GetVolume(vmId uuid.UUID) (domain.Volume, error) {
	ret := _m.Called(vmId)

	if len(ret) == 0 {
		panic("no return value specified for GetVolume")
	}

	var r0 domain.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (domain.Volume, error)); ok {
		return rf(vmId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) domain.Volume); ok {
		r0 = rf(vmId)
	} else {
		r0 = ret.Get(0).(domain.Volume)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(vmId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolume provides a mock function with given fields: userId
func (_m *Volume) ListVolume(userId uuid.UUID) ([]domain.Volume, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for ListVolume")
	}

	var r0 []domain.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]domain.Volume, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.Volume); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Volume)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResizeVolume provides a mock function with given fields: userId, amount
func (_m *Volume) ResizeVolume(userId uuid.UUID, amount int) error {
	ret := _m.Called(userId, amount)

	if len(ret) == 0 {
		panic("no return value specified for ResizeVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int) error); ok {
		r0 = rf(userId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVolume provides a mock function with given fields: machine
func (_m *Volume) UpdateVolume(machine domain.Volume) error {
	ret := _m.Called(machine)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Volume) error); ok {
		r0 = rf(machine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVolume creates a new instance of Volume. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVolume(t interface {
	mock.TestingT
	Cleanup(func())
}) *Volume {
	mock := &Volume{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
